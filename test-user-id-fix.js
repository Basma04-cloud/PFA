// Script pour tester la correction du probl√®me user_id

console.log("üîß TEST DE LA CORRECTION USER_ID")
console.log("================================\n")

// Test 1: V√©rifier l'authentification
function testAuthentication() {
  console.log("üîê Test 1: Authentification")
  console.log("---------------------------")
  \
  const userAuthenticated = {{ Auth::check() ? 'true' : 'false' }
}
const userId = {{ Auth::id() }
}
const userName = '{{ Auth::user()->name ?? "N/A" }}'

console.log(`Utilisateur connect√©: ${userAuthenticated}`)
console.log(`User ID: ${userId}`)
console.log(`Nom utilisateur: ${userName}`)

if (userAuthenticated && userId) {
  console.log("‚úÖ Authentification OK")
  return true;
} else {
  console.log("‚ùå Probl√®me d'authentification")
  return false;
}
}

// Test 2: V√©rifier les r√®gles de validation
async
function testValidationRules() {
  console.log("\nüìã Test 2: R√®gles de validation")
  console.log("-------------------------------")

  try {
    const response = await fetch('/debug/comptes')
    const data = await response.json()

    console.log("R√®gles de validation:", data.validation_rules)

    const hasUserIdRule = data.validation_rules && data.validation_rules.user_id

    if (hasUserIdRule) {
      console.log("‚ùå PROBL√àME: user_id est encore dans les r√®gles de validation")
      console.log("üí° Solution: Le contr√¥leur doit utiliser getValidationRules() au lieu de getFullValidationRules()")
      return false
    } else {
      console.log("‚úÖ R√®gles de validation correctes (pas de user_id requis)")
      return true
    }
  } catch (error) {
    console.log("‚ùå Erreur lors du test:", error.message)
    return false
  }
}

// Test 3: Simuler une soumission de formulaire
function testFormData() {
  console.log("\nüìù Test 3: Donn√©es du formulaire")
  console.log("--------------------------------")

  const formData = {
    nom_compte: "Test Compte " + new Date().getTime(),
    type_compte: "courant",
    solde: 1000,
    description: "Test de cr√©ation sans user_id dans le formulaire",
  }

  console.log("Donn√©es envoy√©es:", formData)

  // V√©rifier qu'il n'y a PAS de user_id dans les donn√©es
  if (formData.user_id) {
    console.log("‚ùå PROBL√àME: user_id ne devrait pas √™tre dans les donn√©es du formulaire")
    return false
  } else {
    console.log("‚úÖ Donn√©es correctes (pas de user_id dans le formulaire)")
    return true
  }
}

// Test 4: Test de cr√©ation r√©elle
async function testRealCreation() {
  console.log("\nüß™ Test 4: Cr√©ation r√©elle")
  console.log("-------------------------")

  try {
    const response = await fetch("/debug/comptes/test-create", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]').getAttribute("content"),
      },
    })

    const data = await response.json()

    console.log("R√©sultat de la cr√©ation:", data)

    if (data.success) {
      console.log("‚úÖ Cr√©ation r√©ussie")
      console.log(`Compte cr√©√© avec ID: ${data.compte.id}`)
      console.log(`User ID associ√©: ${data.user_id}`)
      return true
    } else {
      console.log("‚ùå Cr√©ation √©chou√©e:", data.error)
      return false
    }
  } catch (error) {
    console.log("‚ùå Erreur lors de la cr√©ation:", error.message)
    return false
  }
}

// Ex√©cuter tous les tests
async function runAllTests() {
  console.log("üöÄ D√âBUT DES TESTS DE CORRECTION")
  console.log("================================\n")

  const results = {
    auth: testAuthentication(),
    validation: await testValidationRules(),
    formData: testFormData(),
    creation: await testRealCreation(),
  }

  console.log("\nüìä R√âSUM√â DES TESTS")
  console.log("==================")

  const allPassed = Object.values(results).every((result) => result === true)

  Object.entries(results).forEach(([test, passed]) => {
    console.log(`${passed ? "‚úÖ" : "‚ùå"} ${test}: ${passed ? "OK" : "√âCHEC"}`)
  })

  if (allPassed) {
    console.log("\nüéâ TOUS LES TESTS SONT PASS√âS !")
    console.log("Le probl√®me 'user id field is required' est corrig√©.")
    console.log("Vous pouvez maintenant cr√©er des comptes normalement.")
  } else {
    console.log("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
    console.log("V√©rifiez les d√©tails ci-dessus pour identifier le probl√®me.")
  }

  return results
}

// Lancer les tests automatiquement
runAllTests()

// Fonction utilitaire pour les d√©veloppeurs
window.testUserIdFix = runAllTests

console.log("\nüí° COMMANDE DISPONIBLE:")
console.log("testUserIdFix() - Relancer tous les tests")
