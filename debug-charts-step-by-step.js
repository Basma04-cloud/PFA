import { Chart } from "@/components/ui/chart"
// Script de diagnostic √©tape par √©tape pour les graphiques

console.log("üîç DIAGNOSTIC COMPLET DES GRAPHIQUES")
console.log("===================================\n")

// √âtape 1: V√©rifier que Chart.js est charg√©
console.log("üìä √âTAPE 1: V√©rification de Chart.js")
console.log("------------------------------------")
if (typeof Chart !== "undefined") {
  console.log("‚úÖ Chart.js est charg√©, version:", Chart.version)
} else {
  console.log("‚ùå Chart.js n'est pas charg√© !")
  console.log("üí° Solution: V√©rifiez que le CDN Chart.js est accessible")
}

// √âtape 2: V√©rifier les √©l√©ments canvas
console.log("\nüé® √âTAPE 2: V√©rification des √©l√©ments canvas")
console.log("---------------------------------------------")
const canvasIds = ["monthlyChart", "expensesChart", "objectifsChart", "comptesChart", "yearlyChart"]
canvasIds.forEach((id) => {
  const element = document.getElementById(id)
  if (element) {
    console.log(`‚úÖ Canvas ${id} trouv√©`)
  } else {
    console.log(`‚ùå Canvas ${id} non trouv√© !`)
  }
})

// √âtape 3: Tester les routes API
console.log("\nüîó √âTAPE 3: Test des routes API")
console.log("-------------------------------")

async function testRoute(url, name) {
  try {
    console.log(`üîÑ Test ${name}...`)
    const response = await fetch(url)

    if (response.ok) {
      const data = await response.json()
      console.log(`‚úÖ ${name} - OK (${data.length || "N/A"} √©l√©ments):`, data)
      return { success: true, data }
    } else {
      console.log(`‚ùå ${name} - Erreur ${response.status}`)
      const errorText = await response.text()
      console.log("D√©tails:", errorText)
      return { success: false, error: response.status }
    }
  } catch (error) {
    console.log(`‚ùå ${name} - Exception:`, error.message)
    return { success: false, error: error.message }
  }
}

async function runAllTests() {
  const tests = [
    { url: "/dashboard/chart-data", name: "Donn√©es mensuelles" },
    { url: "/dashboard/expenses-data", name: "D√©penses par cat√©gorie" },
    { url: "/dashboard/objectifs-data", name: "Objectifs" },
    { url: "/dashboard/comptes-data", name: "Comptes" },
  ]

  const results = []
  for (const test of tests) {
    const result = await testRoute(test.url, test.name)
    results.push({ ...test, ...result })
  }

  console.log("\nüìã R√âSUM√â DES TESTS:")
  console.log("===================")

  const successful = results.filter((r) => r.success).length
  const total = results.length

  console.log(`R√©ussis: ${successful}/${total}`)

  if (successful === total) {
    console.log("üéâ Tous les tests sont pass√©s ! Le probl√®me vient peut-√™tre d'ailleurs.")
    console.log("\nüîß √âTAPES SUIVANTES:")
    console.log("1. V√©rifiez la console pour d'autres erreurs")
    console.log("2. V√©rifiez que les fonctions de cr√©ation de graphiques sont appel√©es")
    console.log("3. V√©rifiez les permissions CSRF si n√©cessaire")
  } else {
    console.log("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez:")
    console.log("1. Les routes sont-elles d√©finies dans web.php ?")
    console.log("2. Le contr√¥leur DashboardController existe-t-il ?")
    console.log("3. L'utilisateur est-il bien connect√© ?")
    console.log("4. Y a-t-il des erreurs dans les logs Laravel ?")
  }

  return results
}

// √âtape 4: V√©rifier l'authentification
console.log("\nüîê √âTAPE 4: V√©rification de l'authentification")
console.log("----------------------------------------------")
// Cette v√©rification sera faite lors des tests API

// √âtape 5: V√©rifier les donn√©es en base
console.log("\nüíæ √âTAPE 5: Suggestions pour v√©rifier les donn√©es")
console.log("------------------------------------------------")
console.log("Ex√©cutez ces commandes dans Tinker (php artisan tinker):")
console.log("User::find(1)->transactions()->count()")
console.log("User::find(1)->comptes()->count()")
console.log("User::find(1)->objectifs()->count()")

// Lancer les tests
console.log("\nüöÄ LANCEMENT DES TESTS...")
console.log("=========================")
runAllTests()

// Fonction utilitaire pour forcer le rechargement
window.forceReloadCharts = () => {
  console.log("üîÑ Rechargement forc√© des graphiques...")
  if (typeof loadChartsData === "function") {
    loadChartsData()
  } else {
    console.log("‚ùå Fonction loadChartsData non trouv√©e")
  }
}

console.log("\nüí° COMMANDES UTILES:")
console.log("====================")
console.log("forceReloadCharts() - Recharger les graphiques")
console.log("testAPIs() - Tester les APIs")
console.log("Chart.instances - Voir les instances de graphiques")
