// Script de test complet pour la cr√©ation de compte

console.log("üß™ TEST COMPLET DE CR√âATION DE COMPTE")
console.log("====================================\n")

// Test 1: V√©rifier la structure de la table
async function testTableStructure() {
  console.log("üìä Test 1: Structure de la table")
  console.log("--------------------------------")

  try {
    const response = await fetch("/debug/comptes")
    const data = await response.json()

    console.log("‚úÖ R√©ponse re√ßue:", data)

    if (data.table_exists) {
      console.log("‚úÖ Table 'compte' existe")
      console.log("Colonnes:", data.table_structure.map((col) => col.Field).join(", "))
      console.log("Champs fillable:", data.fillable_fields.join(", "))
    } else {
      console.log("‚ùå Table 'compte' n'existe pas !")
    }

    return data
  } catch (error) {
    console.log("‚ùå Erreur:", error.message)
    return null
  }
}

// Test 2: Tester la cr√©ation automatique
async function testAutoCreate() {
  console.log("\nü§ñ Test 2: Cr√©ation automatique")
  console.log("-------------------------------")

  try {
    const response = await fetch("/debug/comptes/test-create", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]')?.getAttribute("content") || "no-token",
      },
    })

    const data = await response.json()

    if (data.success) {
      console.log("‚úÖ Cr√©ation automatique r√©ussie")
      console.log("Compte cr√©√©:", data.compte)
    } else {
      console.log("‚ùå Cr√©ation automatique √©chou√©e:", data.error)
    }

    return data
  } catch (error) {
    console.log("‚ùå Erreur:", error.message)
    return null
  }
}

// Test 3: Simuler une soumission de formulaire
function testFormSubmission() {
  console.log("\nüìù Test 3: Simulation de formulaire")
  console.log("-----------------------------------")

  const formData = {
    nom_compte: "Test Compte " + new Date().getTime(),
    type_compte: "courant",
    solde: 1000,
    description: "Compte de test cr√©√© automatiquement",
  }

  console.log("Donn√©es du formulaire:", formData)

  // V√©rifier la validation c√¥t√© client
  if (!formData.nom_compte) {
    console.log("‚ùå Nom du compte manquant")
    return false
  }

  if (!formData.type_compte) {
    console.log("‚ùå Type de compte manquant")
    return false
  }

  if (formData.solde < 0) {
    console.log("‚ùå Solde n√©gatif")
    return false
  }

  console.log("‚úÖ Validation c√¥t√© client r√©ussie")
  return true
}

// Test 4: V√©rifier les routes
async function testRoutes() {
  console.log("\nüõ£Ô∏è  Test 4: V√©rification des routes")
  console.log("----------------------------------")

  const routes = [
    { url: "/comptes", name: "Index des comptes" },
    { url: "/comptes/create", name: "Formulaire de cr√©ation" },
    { url: "/debug/comptes", name: "Debug des comptes" },
  ]

  for (const route of routes) {
    try {
      const response = await fetch(route.url)
      if (response.ok) {
        console.log(`‚úÖ ${route.name} - OK (${response.status})`)
      } else {
        console.log(`‚ùå ${route.name} - Erreur ${response.status}`)
      }
    } catch (error) {
      console.log(`‚ùå ${route.name} - Exception: ${error.message}`)
    }
  }
}

// Ex√©cuter tous les tests
async function runAllTests() {
  console.log("üöÄ D√âBUT DES TESTS")
  console.log("==================\n")

  const results = {
    structure: await testTableStructure(),
    autoCreate: await testAutoCreate(),
    formValidation: testFormSubmission(),
    routes: await testRoutes(),
  }

  console.log("\nüìã R√âSUM√â")
  console.log("=========")

  if (results.structure?.table_exists) {
    console.log("‚úÖ Structure de table: OK")
  } else {
    console.log("‚ùå Structure de table: PROBL√àME")
    console.log("üí° Solution: Ex√©cutez 'php artisan migrate'")
  }

  if (results.autoCreate?.success) {
    console.log("‚úÖ Cr√©ation automatique: OK")
  } else {
    console.log("‚ùå Cr√©ation automatique: PROBL√àME")
    console.log("üí° V√©rifiez les logs Laravel")
  }

  if (results.formValidation) {
    console.log("‚úÖ Validation formulaire: OK")
  } else {
    console.log("‚ùå Validation formulaire: PROBL√àME")
  }

  console.log("\nüéØ PROCHAINES √âTAPES:")
  if (!results.structure?.table_exists) {
    console.log("1. Ex√©cutez: php artisan migrate")
  }
  if (!results.autoCreate?.success) {
    console.log("2. V√©rifiez les logs: storage/logs/laravel.log")
  }
  console.log("3. Essayez de cr√©er un compte manuellement")

  return results
}

// Lancer les tests
runAllTests()

// Fonction utilitaire pour les d√©veloppeurs
window.testCompteCreation = runAllTests
window.debugCompte = testTableStructure

console.log("\nüí° COMMANDES DISPONIBLES:")
console.log("testCompteCreation() - Lancer tous les tests")
console.log("debugCompte() - V√©rifier la structure de table")
